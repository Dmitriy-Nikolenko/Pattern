<?php
// Поиск элемента массива с известным индексов

$arr1 = [5, 4, 3, 2, 1];
echo $arr1[3] . '<br>';  //Сложность алгоритма O(1) вызывается 1 раз

//Дублирование одномерного массива через foreach

$arr2 = [5, 4, 3, 2, 1];
foreach ($arr2 as $elem) {  //Сложность алгоритма O(n) вызывается n раз
    echo $elem;
}

//Рекурсивная функция нахождения факториала числа

function factorial($n) {
    if ($n == 0) {
        return 1;
    } else {
        return $n * factorial($n-1); // Сложность алгоритма O(n) вызывается n раз
    }
}
echo "<br>" . factorial(3);

//Удаление элемента массива с известным индексом
$arr4 = [5, 4, 3, 2, 1];
unset($arr4[3]); // Сложность алгоритма O(1) вызывается 1 раз
var_dump($arr4);


$n = 10000;
$array[] = [];
//Сложность всего алгоритма O(n) * O(log(n)) Получается сложность алгоритма O(n^log(n))
for ($i = 0; $i < $n; $i++) {   // Сложность алгоритма O(n)
    for ($j = 1; $j < $n; $j += 2) { //Сложность алгоритма O(log n)
        $array[$i][$j] = true;
    }
}

$n = 10000;
$array[] = [];
//Сложность всего алгоритма O(n) * O(n) Получается сложность алгоритма O(n^2)
for ($i = 0; $i < $n; $i += 2) {// Сложность алгоритма O(n)
    for ($j = $i; $j < $n; $j++) {// Сложность алгоритма O(n)
        $array[$i][$j] = true;
    }
}

$n = 10000;
$array[] = [];
foo($n);

function foo($n)
    //Сложность всего алгоритма O(n) * O(n) Получается сложность алгоритма O(n^2)
{
    while ($n > 0) { // Сложность алгоритма O(n) вызывается n раз
        for ($j =0; $j < $n; $j++) { // Сложность алгоритма O(n) вызывается n раз
            $n--;
            foo($n);
        }
    }
}
